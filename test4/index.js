// Generated by CoffeeScript 1.10.0
(function () {
    var bubble_layer, h, height, line, pack, stratify, svg, vis, w, width, zoom, zoomable_layer;

    const beta_value = 0.5;

    svg = d3.select('svg');

    width = svg.node().getBoundingClientRect().width;

    height = svg.node().getBoundingClientRect().height;

    zoomable_layer = svg.append('g');

    zoom = d3.zoom().scaleExtent([-Infinity, Infinity]).on('zoom', function () {
        return zoomable_layer.attrs({
            transform: d3.event.transform
        });
    });

    svg.call(zoom);


    vis = zoomable_layer.append('g').attrs({
        transform: "translate(" + (width / 2) + "," + (height / 2) + ")"
    });

    stratify = d3.stratify().parentId(function (d) {
        return d.id.substring(0, d.id.lastIndexOf("."));
    });

    w = width - 8;

    h = height - 8;

    pack = d3.pack().size([w, h]).padding(3);

    line = d3.line()
        .curve(d3.curveBundle.beta(beta_value))

        .x(function (d) {
            return d.x;
        })
        .y(function (d) {
            return d.y;
        });

    let betaf = 50;
    let beta = betaf / 100;
    let data;


    let diameter = 960;
    let radius = diameter / 2;
    let innerRadius = radius - 120;
    let cluster = d3.cluster()
        .size([360, innerRadius]);


    bubble_layer = vis.append('g').attrs({
        transform: "translate(" + (-w / 2) + "," + (-h / 2) + ")"
    });


    d3.json('/flare.json', function (er, cl) {
        data = cl;

        console.log(data);

        let bubbles, enb, index, links, root;

        // a = stratify(data);


         root = d3.hierarchy(packageHierarchy(data), (d) => d.children);
        cluster(root);

        pack(root);
        index = {};
        // root.eachBefore(function (d) {
        //     index[d.data.id] = d;
        //     return index[d.data.id];
        // });

        let nodes = root.descendants();


        links_data = packageImports(nodes);


        // links_data.forEach(function (d) {
        //     d.source = index[d.source];
        //     d.target = index[d.target];
        //     d.path = d.source.path(d.target);
        //     return d.path;
        // });


        bubbles = bubble_layer.selectAll('.bubble').data(nodes);

        enb = bubbles.enter().append('circle').attrs({
            "class": 'bubble',
            cx: function (d) {
                return d.x;
            },
            cy: function (d) {
                return d.y;
            },
            r: function (d) {
                return d.r;
            }
        });
        enb.append('title').text(function (d) {
            return d.id;
        });
        links = bubble_layer.selectAll('.link').data(links_data);


        return links.enter().append('path').attrs({
            "class": 'link',
            d: function (d) {
                return line(d.path);
            }
        });
    });


    // Lazily construct the package hierarchy from class names.
    function packageHierarchy(classes) {
        let map = {};

        classes.forEach(function (d) {
            find(d.name, d);
        });

        function find(name, data) {
            let node = map[name];
            let i;

            if (!node) {
                map[name] = data || {name: name, children: []};
                node = map[name];


                if (name.length) {
                    i = name.lastIndexOf(".");
                    node.parent = find(name.substring(0, i));
                    node.parent.children.push(node);
                    node.key = name.substring(i + 1);
                }
            }
            return node;
        }

        return map[""];
    }


    // Return a list of imports for the given array of nodes.
    function packageImports(nodes) {
        let map = {},
            imports = [];

        // Compute a map from name to node.
        nodes.forEach(function (d) {
            map[d.data.name] = d;
        });

        // For each import, construct a link from the source to target node.
        nodes.forEach(function (d) {
            if (d.data.imports) {
                d.data.imports.forEach(function (i) {
                    imports.push({source: map[d.data.name], target: map[i], path: map[d.data.name].path(map[i])});
                });
            }
        });

        return imports;
    }


}).call(this);
